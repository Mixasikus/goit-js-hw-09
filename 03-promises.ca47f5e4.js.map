{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,sBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,UAAWJ,SAASC,cAAc,0BASvB,SAAJI,EAAcC,EAAUP,GAC/B,MAAMQ,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEL,E,MAAUP,IAEpBa,EAAO,C,SAAEN,E,MAAUP,MAEpBA,MAfPD,EAAKM,UAAUU,iBAAiB,SAASC,IACvCA,EAAIC,iBAmB4B,SAAAb,GAChC,IAAIc,EACAf,EAAOgB,SAASpB,EAAKI,KAAKiB,OAC1BC,EAAaF,SAASpB,EAAKC,MAAMoB,OACrC,GAAc,GAAVhB,EACFkB,MAAM,8BAEN,IAAK,IAAIC,EAAI,EAAGA,GAAKnB,EAAQmB,GAAK,EACvBL,EAATK,EAAI,EAAeF,GAAclB,EAAmBkB,EACpDf,EAAciB,EAAGL,GACdM,MAAK,EAACjB,SAAEA,EAAQP,MAAEA,MACjByB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqBpB,QAAiBP,OAExC4B,QAAQC,IAAI,uBAAqBtB,QAAiBP,UAEnD8B,OAAM,EAACvB,SAAEA,EAAQP,MAAEA,MAClByB,EAAA5B,GAAS6B,OAAOK,QACd,sBAAoBxB,QAAiBP,OAEvC4B,QAAQC,IAAI,sBAAoBtB,QAAeP,UAtCvDgC,CAAyBjC,EAAKK,OAAOgB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  submitBtn: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.submitBtn.addEventListener('click', evt => {\n  evt.preventDefault();\n  createPromisesOnClickBtn(refs.amount.value);\n});\n\n// Создаем промис\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Создаем промисы и вызываем их по очереди\nfunction createPromisesOnClickBtn(amount) {\n  let timeout;\n  let step = parseInt(refs.step.value);\n  let firstDelay = parseInt(refs.delay.value);\n  if (amount == 0) {\n    alert(\"Amount can't be empty\");\n  } else {\n    for (let i = 1; i <= amount; i += 1) {\n      i > 1 ? (timeout = firstDelay += step) : (timeout = firstDelay);\n      createPromise(i, timeout)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n  }\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","delay","document","querySelector","step","amount","submitBtn","$47d4ff9957288465$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","timeout","parseInt","value","firstDelay","alert","i","then","$parcel$interopDefault","Notify","success","console","log","catch","failure","$47d4ff9957288465$var$createPromisesOnClickBtn"],"version":3,"file":"03-promises.ca47f5e4.js.map"}